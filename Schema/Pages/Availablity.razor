@page "/availablity"

@inject IJSRuntime JS
@inject Services.PageNavigationService PageNavService
@inject Services.UsersService UsersService
@inject Services.BookingsService BookingsService
@inject AuthenticationStateProvider authStateProvider
@inject Services.AvailabilityService AvailabilityService

<div class="row layout-top-spacing">
    <div class="row layout-top-spacing" />


</div>

@code {
    private DataAccessLibrary.Models.User? _user;
    private bool _showLatestBookings = false;
    private List<DataAccessLibrary.Models.Availability>? availablities;

    protected override async Task OnInitializedAsync()
    {
        var loggedInUser = (Authentication.CustomAuthenticationStateProvider)authStateProvider;
        var state = await loggedInUser.GetAuthenticationStateAsync();
        string username = state?.User?.Identity?.Name ?? "";

        if(!string.IsNullOrEmpty(username))
        {
            this._user = await this.UsersService.GetUser(username);

            if(this._user != null)
            {
                this.availablities = await this.AvailabilityService.GetAvailabilitiesAsync(this._user.Id);
            }
        }

        this.PageNavService.UpdateActivePage("Availablity");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("OnScrollEvent");
            this.StateHasChanged();
        }
    }


}
