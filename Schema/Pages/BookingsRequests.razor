@page "/bookingrequests"

@inject IJSRuntime JS
@inject Services.PageNavigationService PageNavService
@inject Services.UsersService UsersService
@inject Services.BookingsService BookingsService
@inject Services.NotificationService NotificationService
@inject Services.BookingRequestsService BookingRequestService

<AuthorizeView Roles="Administrator" Context="usersPageContext">
    <Authorized>
        <div class="row layout-top-spacing">

            <div class="row layout-top-spacing" />

            @if (this.isLoading)
            {
                <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                    <div class="statbox widget box box-shadow">
                        <center><div class="spinner-border spinner-border-reverse align-self-center loader-lg text-secondary">Loading...</div></center>
                    </div>
                </div>
            }
            else
            {
                <div id="tableSimple" class="col-lg-12 col-12 layout-spacing">
                    <div class="statbox widget box box-shadow">
                        <div class="widget-header">
                            <div class="row">
                                <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                                    <h4>Boknings Önskemål</h4>
                                </div>
                            </div>
                        </div>
                        <div class="widget-content widget-content-area">

                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th scope="col">Namn</th>
                                            <th scope="col">Pass</th>
                                            @*<th scope="col">Avslut</th>*@
                                            <th scope="col">Plats</th>
                                            <th scope="col">Typ</th>
                                            <th class="text-center" scope="col"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (this._bookingRequests != null && this._bookingRequests.Count > 0)
                                        {
                                            @foreach (var request in this._bookingRequests)
                                            {
                                                <tr>
                                                    <td>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-calendar"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                                                        <span class="table-inner-text">@(this.GetUser(request.UserId)?.FirstName + " " + this.GetUser(request.UserId)?.LastName)</span>
                                                    </td>
                                                    <td>
                                                        @(this.GetBooking(request.ScheduleId)?.DateStart + " - " + this.GetBooking(request.ScheduleId)?.DateEnd)
                                                    </td>
                                                    <td>
                                                        @(this.GetBooking(request.ScheduleId)?.JobPlace)
                                                    </td>
                                                    <td>
                                                        @(this.GetBooking(request.ScheduleId)?.JobType)
                                                    </td>
                                                    <td class="text-center">
                                                        <button class="btn btn-outline-success" @onclick="() => this.AcceptBookingRequest(request)">Acceptera</button>
                                                        <button class="btn btn-outline-danger" @onclick="() => this.DeclineBookingRequest(request)">Avböj</button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You cannot view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isLoading = true;
    private List<DataAccessLibrary.Models.User>? _users;
    private List<DataAccessLibrary.Models.Schedule>? _bookings;
    private List<DataAccessLibrary.Models.ScheduleRequests>? _bookingRequests;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActivePage("BookingRequests");

            this._users = await this.UsersService.GetUsers();
            this._bookings = await this.BookingsService.GetBookings();
            this._bookingRequests = await this.BookingRequestService.GetBookingRequests();

            await JS.InvokeVoidAsync("OnScrollEvent");
            this.isLoading = false;
            this.StateHasChanged();
        }
    }

    private async Task AcceptBookingRequest(DataAccessLibrary.Models.ScheduleRequests request)
    {
        var user = this.GetUser(request.UserId);
        var booking = this.GetBooking(request.ScheduleId);

        if(user == null || booking == null)
        {
            return;
        }

        booking.UserId = user.Id;
        request.Accepted = true;
        request.Active = false;

        await this.BookingsService.UpdateBooking(booking);
        await this.UsersService.UpdateUser(user);
        await this.BookingRequestService.UpdateBookingRequest(request);

        this._bookingRequests?.Remove(request);
        this.StateHasChanged();

        await this.NotificationService.AlertSuccess("Pass Tilldelad!");
    }

    private async Task DeclineBookingRequest(DataAccessLibrary.Models.ScheduleRequests request)
    {
        var user = this.GetUser(request.UserId);
        var booking = this.GetBooking(request.ScheduleId);

        if (user == null || booking == null)
        {
            return;
        }

        request.Accepted = false;
        request.Active = false;

        await this.BookingsService.UpdateBooking(booking);
        await this.UsersService.UpdateUser(user);
        await this.BookingRequestService.UpdateBookingRequest(request);

        this._bookingRequests?.Remove(request);
        this.StateHasChanged();

        await this.NotificationService.AlertSuccess("Pass Avböjd!");
    }

    private DataAccessLibrary.Models.User? GetUser(int id)
    {
        return this._users?.Where(x => x.Id == id).FirstOrDefault();
    }

    private DataAccessLibrary.Models.Schedule? GetBooking(int id)
    {
        return this._bookings?.Where(x => x.Id == id).FirstOrDefault();
    }
}
