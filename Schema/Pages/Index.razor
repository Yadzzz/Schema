@page "/"

@*@attribute [Authorize(Roles = "Administrator,User")]*@
@inject IJSRuntime JS
@inject Services.PageNavigationService PageNavService
@inject Services.EmailService EmailService
@inject Services.UsersService UsersService

<PageTitle>Hem</PageTitle>

@*<AuthorizeView>
    <Authorized>
*@

<link rel="stylesheet" type="text/css" href="../src/assets/css/light/elements/alert.css">

<div class="row layout-top-spacing">

    <div class="col-12">
        <div class="alert alert-arrow-right alert-icon-right alert-light-warning alert-dismissible fade show mb-4" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-alert-circle"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line></svg>
            @*<strong>Hello, @context.User.Identity.Name!</strong>*@

            <div class="col-10" style="display: flex; justify-content: center; align-items: center;">
                <strong>Väskust Bevakning Schema App</strong>
            </div>

            <div class="col-10" style="display: flex; justify-content: center; align-items: center;">
                <p>Navigare i menyn för att komma åt respektive sida.</p>
            </div>

            <br />

            <div class="col-10" style="display: flex; justify-content: center; align-items: center;">
                <img src="/vkblogo.png" alt="My Image" width="90" height="100" @onclick="this.SendEmail" />
            </div>

            <br />

        </div>
    </div>

    <div class="col-md-12">
        @if (this.ExpireUsers != null && this.ExpireUsers.Count > 0)
        {
            <div class="alert alert-arrow-right alert-icon-right alert-light-danger mb-4"
                 role="alert">
                <svg> ... </svg>
                <strong>Varning!</strong> Förordnande går ut snart för:
                <br />
                @foreach(var user in this.ExpireUsers)
                {
                    <p>@user</p>
                }
            </div>
        }

        @if (this.ExpiredUsers != null && this.ExpiredUsers.Count > 0)
        {
            <div class="alert alert-arrow-right alert-icon-right alert-light-danger mb-4"
                 role="alert">
                <svg> ... </svg>
                <strong>Varning!</strong> Förordnande har gått ut för:
                <br />
                @foreach (var user in this.ExpiredUsers)
                {
                    <p>@user</p>
                }
            </div>
        }
    </div>

</div>

<!-- CONTENT AREA -->
@*    </Authorized>
</AuthorizeView>*@

@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }

    private List<string>? ExpireUsers { get; set; }
    private List<string>? ExpiredUsers { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActivePage("Index");

            //var authState = await this._authenticationState;

            this.ExpireUsers = new List<string>();
            this.ExpiredUsers = new List<string>();
            var users = await this.UsersService.GetUsers();
            foreach (var user in users)
            {
                DateTime expireDate;
                if (DateTime.TryParse(user.ForordnandeDate, out expireDate))
                {
                    if ((expireDate - DateTime.Now).Days >= 0 && (expireDate - DateTime.Now).Days <= 90)
                    {
                        this.ExpireUsers.Add($"{user.FirstName} {user.LastName}");
                    }
                }

                DateTime expiredDate;
                if (DateTime.TryParse(user.ForordnandeDate, out expiredDate))
                {
                    if ((expiredDate - DateTime.Now).Days < 0)
                    {
                        this.ExpiredUsers.Add($"{user.FirstName} {user.LastName}");
                    }
                }
            }

            await JS.InvokeVoidAsync("OnScrollEvent");
            this.StateHasChanged();
        }
    }

    private async Task SendEmail()
    {
        //await this.EmailService.SendEmail("yadmarzan@gmail.com", "Det har skett en ändring i din bokning");
    }
}