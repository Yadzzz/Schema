@*@page "/login"*@

@using Schema.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@*@inject Services.SessionService SessionService*@
@inject Services.UserDataService UserDataService

<PageTitle>Logga In</PageTitle>

<link href="../src/assets/css/light/authentication/auth-boxed.css" rel="stylesheet" type="text/css" />
<link href="../layouts/horizontal-dark-menu/css/light/plugins.css" rel="stylesheet" type="text/css" />

@*<link href="../src/assets/css/dark/authentication/auth-boxed.css" rel="stylesheet" type="text/css" />
<link href="../layouts/horizontal-dark-menu/css/dark/plugins.css" rel="stylesheet" type="text/css" />*@

<div class="auth-container d-flex">

    <div class="container mx-auto">

        <div class="row">

            <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-8 col-12 d-flex flex-column align-self-center mx-auto">
                <div class="card mt-3 mb-3">
                    <div class="card-body">

                        @if (this.isLoading)
                        {
                                <center><div class="spinner-border spinner-border-reverse align-self-center loader-lg text-secondary">Loading...</div></center>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    <h2>Logga In</h2>
                                    <p>Ange ditt användarnamn och lösenord för att logga in.</p>

                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label class="form-label">Användarnamn</label>
                                        <input type="text" class="form-control" @bind="this.loginModel.Username" @onkeydown="this.Enter">
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="mb-4">
                                        <label class="form-label">Lösenord</label>
                                        <input type="password" class="form-control" @bind="this.loginModel.Password" @onkeydown="this.Enter">
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="mb-3">
                                        @*<div class="form-check form-check-primary form-check-inline">
                                    <input class="form-check-input me-3" type="checkbox" id="form-check-default">
                                    <label class="form-check-label" for="form-check-default">
                                    Remember me
                                    </label>
                                    </div>*@
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="mb-4">
                                        <button class="btn btn-dark w-100" @onclick="this.Authenticate">Logga In</button>
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>

@code {
    private Models.LoginModel loginModel = new Models.LoginModel();

    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //this.loginModel.Username = await this.SessionService.GetUsername();
        //this.loginModel.Password = await this.SessionService.GetPassword();

        //if(!string.IsNullOrEmpty(this.loginModel.Username) || !string.IsNullOrEmpty(this.loginModel.Password))
        //{
        //    await this.Authenticate();
        //}
    }

    private async Task Authenticate()
    {
        this.isLoading = true;
        this.StateHasChanged();
        await Task.Delay(100);

        var user = await userAccountService.AuthenticateUser(loginModel.Username, loginModel.Password);
        //if (await userAccountService.AuthenticateUser(loginModel.Username, loginModel.Password, out UserAccount user))

        if (user != null)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Username = user.Username,
                    Role = user.Role
                });

            await this.UserDataService.InitializeUserData(user.Username);
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password.");
            this.loginModel.Username = string.Empty;
            this.loginModel.Password = string.Empty;
            return;
        }

        this.isLoading = false;
        this.StateHasChanged();
        //navManager.NavigateTo("/", true);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await this.Authenticate();
        }
    }
}
