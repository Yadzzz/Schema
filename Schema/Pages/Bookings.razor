@page "/bookings"
@page "/bookings/{BookingId:int}"

@inject IJSRuntime JS
@inject Services.PageNavigationService PageNavService
@inject Services.UsersService UsersService
@inject Services.BookingsService BookingsService
@inject Services.NotificationService NotificationService
@inject Services.JobsService JobsService

<AuthorizeView Roles="Administrator" Context="usersPageContext">
    <Authorized>
        <div class="row layout-top-spacing">

            <div class="row layout-top-spacing" />

            @if (this.isLoading)
            {
                <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                    <div class="statbox widget box box-shadow">
                        <center><div class="spinner-border spinner-border-reverse align-self-center loader-lg text-secondary">Loading...</div></center>
                    </div>
                </div>
            }
            else
            {

                <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                    <div class="statbox widget box box-shadow">
                        <div class="widget-header">
                            <div class="row">
                                <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                                    <h4>Bokningar</h4>
                                </div>
                            </div>
                        </div>
                        <div class="widget-content widget-content-area">

                            @*<div class="form-group mb-4">
                                <label for="exampleFormControlSelect1">Användare</label>
                                <select class="form-select" id="exampleFormControlSelect1" @onchange=@OnChangeUser>
                                <option value="0">Välj Användare</option>
                                @if (this._users != null && this._users.Count > 0)
                                {
                                foreach (var user in this._users)
                                {
                                <option value="@user.Id">@(user.FirstName + " " + user.LastName)</option>
                                }
                                }
                                </select>
                                </div>*@

                            <div class="col-sm-12">
                                <div class="d-grid gap-2 col-12 mx-auto">
                                    <button class="btn btn-dark mb-4" @onclick="this.AddNewBooking">Lägg till Bokning</button>
                                    <button class="btn btn-dark mb-4" @onclick="this.GetBookings">Visa Senaste Bokningar</button>
                                    @if ((this._showLatestBookings && this._bookings != null && this._bookings.Count > 0) || this._selectedSchedule != null)
                                    {
                                        <button class="btn btn-dark mb-4" @onclick="this.Reset">Återställ</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row layout-top-spacing" />

                @if (this._showLatestBookings && this._bookings != null && this._bookings.Count > 0)
                {
                    <div id="tableSimple" class="col-lg-12 col-12 layout-spacing">
                        <div class="statbox widget box box-shadow">
                            <div class="widget-header">
                                <div class="row">
                                    <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                                        <h4>Bokningar</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="widget-content widget-content-area">

                                <div class="table-responsive">
                                    <table class="table table-bordered">
                                        <thead>
                                            <tr>
                                                <th scope="col">Namn</th>
                                                <th scope="col">Datum</th>
                                                <th class="text-center" scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var booking in this._bookings.OrderByDescending(x => x.DateStart))
                                            {
                                                <tr>
                                                    <td>@(this.GetUser(booking.UserId)?.FirstName + " " + this.GetUser(booking.UserId)?.LastName)</td>
                                                    <td>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-calendar"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                                                        <span class="table-inner-text">@(booking.DateStart?.Date.Day + "/" + booking.DateStart?.Month + " " + booking.TimeStart + "-" + booking.TimeEnd)</span>
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="action-btns">
                                                            @*<a href="javascript:void(0);" class="action-btn btn-view bs-tooltip me-2" data-toggle="tooltip" data-placement="top" title="View">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                                                </a>*@
                                                            <a href="javascript:void(0);" @onclick=@(() => this.Select(booking)) class="action-btn btn-edit bs-tooltip me-2" data-toggle="tooltip" data-placement="top" title="Edit">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
                                                            </a>
                                                            <a href="javascript:void(0);" @onclick=@(() => this.Delete(booking)) class="action-btn btn-delete bs-tooltip" data-toggle="tooltip" data-placement="top" title="Delete">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                                                            </a>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>
                }

                @if (this._selectedSchedule != null)
                {
                    <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                        <div class="statbox widget box box-shadow">
                            <div class="widget-header">
                                <div class="row">
                                    <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                                        <center><h4>Bokning</h4></center>
                                    </div>
                                </div>
                            </div>
                            <div class="widget-content widget-content-area">
                                <div class="row g-3">
                                    <div class="form-group mb-4">
                                        <label for="exampleFormControlSelect1">Användare</label>
                                        <select class="form-select" id="exampleFormControlSelect1" @onchange=@OnChangeUser>
                                            <option value="0">Välj Användare</option>
                                            @if (this._users != null && this._users.Count > 0)
                                            {
                                                foreach (var user in this._users)
                                                {
                                                    if (this._selectedSchedule.UserId == user.Id)
                                                    {
                                                        <option value="@user.Id" selected>@(user.FirstName + " " + user.LastName)</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@user.Id">@(user.FirstName + " " + user.LastName)</option>
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="col-sm-6">
                                        <label for="usernameInput">Startdatum</label>
                                        <InputDate @bind-Value="this._selectedSchedule.DateStart" />
                                    </div>
                                    <div class="col-sm-6">
                                        <label for="usernameInput">Slutdatum</label>
                                        <InputDate @bind-Value="this._selectedSchedule.DateEnd" />
                                    </div>
                                    <div class="col-sm-6">
                                        <label for="usernameInput">Starttid</label>
                                        <input id="usernameInput" type="text" class="form-control" placeholder="e.g 22:00" @bind-value="this._selectedSchedule.TimeStart" @bind-value:event="oninput">
                                    </div>
                                    <div class="col-sm-6">
                                        <label for="usernameInput">Sluttid</label>
                                        <input id="usernameInput" type="text" class="form-control" placeholder="e.g 03:45" @bind-value="this._selectedSchedule.TimeEnd" @bind-value:event="oninput">
                                    </div>
                                    <div class="form-group mb-4">
                                        <label for="exampleFormControlSelect1">Jobtyp</label>
                                        <select class="form-select" id="exampleFormControlSelect1" @onchange="this.OnChangeJobType">
                                            <option value="0">Jobbtyp</option>
                                            @if (this.jobTypes != null && this.jobTypes.Count > 0)
                                            {
                                                foreach (var job in this.jobTypes)
                                                {
                                                    if (this._selectedSchedule?.JobType?.ToLower() == job.ToLower())
                                                    {
                                                        <option value="@job" selected>@job</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@job">@job</option>
                                                    }
                                                }
                                            }
                                            @*else
                                                {
                                                <option value="0">Jobbtyp</option>
                                                <option value="Entrevärd">Entrevärd</option>
                                                <option value="Ordningsvakt">Ordningsvakt</option>
                                                <option value="Vaktchef">Vaktchef</option>
                                                <option value="Annat">Annat</option>
                                                }*@
                                        </select>
                                    </div>
                                    @*<div class="col-sm-6">
                                        <label for="arbetsplatsInput">Arbetsplats</label>
                                        <input id="arbetsplatsInput" type="text" class="form-control" placeholder="e.g Push" @bind-value="this._selectedSchedule.JobPlace" @bind-value:event="oninput">
                                    </div>*@
                                    <div class="form-group mb-4">
                                        <label for="exampleFormControlSelect1">Jobtyp</label>
                                        <select class="form-select" id="exampleFormControlSelect1" @onchange="this.OnChangeJobPlace">
                                            <option value="">Arbetsplats</option>
                                            @if (this._jobPlaces != null && this._jobPlaces.Count > 0)
                                            {
                                                foreach (var job in this._jobPlaces)
                                                {
                                                    if (this._selectedSchedule?.JobPlace?.ToLower() == job.Name.ToLower())
                                                    {
                                                        <option value="@job.Name" selected>@job.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@job.Name">@job.Name</option>
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="col-sm-6">
                                        <label for="commentInput">Kommentar</label>
                                        <input id="commentInput" type="text" class="form-control" placeholder="Kommentar" @bind-value="this._selectedSchedule.Comment" @bind-value:event="oninput">
                                    </div>
                                </div>

                                <br /><br />

                                <div class="col-sm-12">
                                    <div class="d-grid gap-2 col-12 mx-auto">
                                        <button class="btn btn-dark mb-4" @onclick="this.Save">Spara</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You cannot view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public int BookingId { get; set; }
    private bool isLoading = true;
    private List<DataAccessLibrary.Models.User>? _users;
    private DataAccessLibrary.Models.Schedule? _selectedSchedule;
    private List<DataAccessLibrary.Models.Schedule>? _bookings;
    private bool _showLatestBookings = false;

    private List<string> jobTypes;
    private List<DataAccessLibrary.Models.Job>? _jobPlaces;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActivePage("Bookings");

            this._users = await this.UsersService.GetUsers();
            this._bookings = await this.BookingsService.GetBookings();
            this.jobTypes = new()
            {
                "Entrevärd",
                "Ordningsvakt",
                "Vaktchef",
                "Ledig Pass",
                "Annat"
            };
            this._jobPlaces = await this.JobsService.GetJobsAsync();

            if (this.BookingId != 0)
            {
                this._selectedSchedule = this._bookings?.Find(x => x.Id == this.BookingId);
            }

            await JS.InvokeVoidAsync("OnScrollEvent");
            this.isLoading = false;
            this.StateHasChanged();
        }
    }

    public async Task Save()
    {
        if (this._selectedSchedule == null) return;

        if (this._selectedSchedule.DateStart == null || string.IsNullOrEmpty(this._selectedSchedule.TimeStart) || string.IsNullOrEmpty(this._selectedSchedule.TimeEnd) ||
            string.IsNullOrEmpty(this._selectedSchedule.JobType) || this._selectedSchedule.UserId == 0 || this._selectedSchedule.DateEnd == null || string.IsNullOrEmpty(this._selectedSchedule.JobPlace))
        {
            await this.NotificationService.AlertError("Vänligen fyll i alla fält!");
            return;
        }

        if (this._selectedSchedule.TimeStart.Length != 5 || this._selectedSchedule.TimeEnd.Length != 5 || !this._selectedSchedule.TimeStart.Contains(":")
            || !this._selectedSchedule.TimeEnd.Contains(":"))
        {
            await this.NotificationService.AlertError("Fel tidsformat i fält Starttid eller Sluttid. Skall vara 22:00 format!");
            return;
        }

        string[] startTime = this._selectedSchedule.TimeStart.Split(":");
        string[] endTime = this._selectedSchedule.TimeEnd.Split(":");
        if (!int.TryParse(startTime[0], out int start1) || !int.TryParse(startTime[1], out int start2) ||
            !int.TryParse(endTime[0], out int end1) || !int.TryParse(endTime[1], out int end2))
        {
            await this.NotificationService.AlertError("Fel tidsformat i fält Starttid eller Sluttid. Skall vara 22:00 format!");
            return;
        }

        var startTimeSpan = DateTime.ParseExact(this._selectedSchedule.TimeStart, "HH:mm", System.Globalization.CultureInfo.InvariantCulture).TimeOfDay;
        var endTimeSpan = DateTime.ParseExact(this._selectedSchedule.TimeEnd, "HH:mm", System.Globalization.CultureInfo.InvariantCulture).TimeOfDay;

        DateTime dt1 = new DateTime(this._selectedSchedule.DateStart.Value.Year, this._selectedSchedule.DateStart.Value.Month,
                                    this._selectedSchedule.DateStart.Value.Day, startTimeSpan.Hours, startTimeSpan.Minutes, startTimeSpan.Seconds);
        DateTime dt2 = new DateTime(this._selectedSchedule.DateEnd.Value.Year, this._selectedSchedule.DateEnd.Value.Month,
                                            this._selectedSchedule.DateEnd.Value.Day, endTimeSpan.Hours, endTimeSpan.Minutes, endTimeSpan.Seconds);

        this._selectedSchedule.DateStart = dt1;
        this._selectedSchedule.DateEnd = dt2;

        if (this._selectedSchedule.Id == 0)
        {
            //Add
            bool success = await this.BookingsService.AddBooking(this._selectedSchedule);

            if (success)
            {
                await this.FlushBookings();
                await this.NotificationService.AlertSuccess("Bokning tillagd!");
            }
            else
            {
                await this.NotificationService.AlertError("Error #494xs2l3, kontakta server admin!");
            }
        }
        else
        {
            //Save
            bool success = await this.BookingsService.UpdateBooking(this._selectedSchedule);

            if (success)
            {
                await this.FlushBookings();
                await this.NotificationService.AlertSuccess("Bokning uppdaterad!");
            }
            else
            {
                await this.NotificationService.AlertError("Error #493444xs2l3, kontakta server admin!");
            }
        }

        this._selectedSchedule = null;
        await this.GetBookings();
        this.StateHasChanged();
    }

    private async Task Delete(DataAccessLibrary.Models.Schedule schedule)
    {
        bool success = await this.BookingsService.DeleteBooking(schedule);

        if (success)
        {
            await this.FlushBookings();
            await this.NotificationService.AlertSuccess("Bokning raderad!");
        }
        else
        {
            await this.NotificationService.AlertError("Error #KJS3K30F00, kontakta server admin!");
        }
    }

    private void Select(DataAccessLibrary.Models.Schedule schedule)
    {
        this._selectedSchedule = schedule;
        this._showLatestBookings = false;
        this.StateHasChanged();
    }

    private void OnSelectUser(int id)
    {
        this._selectedSchedule.UserId = id;
        this.StateHasChanged();
    }

    private void OnChangeUser(ChangeEventArgs e)
    {
        string inputValue = e?.Value?.ToString();
        if (int.TryParse(inputValue, out int id))
        {
            this.OnSelectUser(id);
        }
    }

    private void OnChangeJobType(ChangeEventArgs e)
    {
        string inputValue = e?.Value?.ToString();
        this._selectedSchedule.JobType = inputValue;
    }

    private void OnChangeJobPlace(ChangeEventArgs e)
    {
        string inputValue = e?.Value?.ToString();
        this._selectedSchedule.JobPlace = inputValue;
    }

    private void AddNewBooking()
    {
        this._selectedSchedule = new()
        {
            Id = 0
        };

        this._showLatestBookings = false;
        this.StateHasChanged();
    }

    private async Task GetBookings()
    {
        if (this._bookings == null || this._bookings.Count == 0)
        {
            this._bookings = await this.BookingsService.GetBookings();

            if (this._bookings?.Count == 0)
            {
                await this.NotificationService.AlertError("Finns inga aktiva bokningar!");
            }
        }

        this._selectedSchedule = null;
        this._showLatestBookings = true;
        this.StateHasChanged();
    }

    private void Reset()
    {
        this._selectedSchedule = null;
        this._showLatestBookings = false;
        this.StateHasChanged();
    }

    private async Task FlushBookings()
    {
        this._bookings = await this.BookingsService.GetBookings();
        this.StateHasChanged();
    }

    private DataAccessLibrary.Models.User? GetUser(int id)
    {
        return this._users?.Where(x => x.Id == id).FirstOrDefault();
    }
}
