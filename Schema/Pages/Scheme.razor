@page "/scheme"

@inject IJSRuntime JS
@inject Calendar.CalendarService CalendarService
@inject Services.PageNavigationService PageNavService
@inject Services.BookingsService BookingService
@inject AuthenticationStateProvider authStateProvider
@inject Services.BookingRequestsService BookingRequestsService
@*@inject Services.UserDataService UserDataService*@

<div class="row layout-top-spacing">

    @*<div class="table-responsive">
    <div class="col-xl-12" style="float:left">
    <div class="col-sm-12">
    <div class="custom-control custom-checkbox checkbox-info">
    <input type="checkbox" class="custom-control-input" id="showNI" checked="false" @onclick=@OnSchemeTypeClick>
    <label class="custom-control-label" for="showNI">Classic Scheme Table</label>
    </div>
    </div>
    </div>
    </div>*@

    <div class="row layout-top-spacing" />

    @if (this.isLoading)
    {
        <div id="flAutoSizing" class="col-lg-12 layout-spacing">
            <div class="statbox widget box box-shadow">
                <center><div class="spinner-border spinner-border-reverse align-self-center loader-lg text-secondary">Loading...</div></center>
            </div>
        </div>
    }
    else
    {
        @if (!this.ShowFilter)
        {
            <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                <div class="row">
                    <div class="col-sm-3">
                        <b @onclick="this.ShowFilterTrigger">Filter</b>
                        @*<div class="d-grid gap-2 col-12 mx-auto">
                <button class="btn btn-outline-dark mb-4" @onclick="this.ShowFilterTrigger">Filter</button>
                </div>*@
                    </div>
                </div>
            </div>
        }
        else
        {
            <div id="flAutoSizing" class="col-lg-12 layout-spacing">
                <div class="statbox widget box box-shadow">
                    <div class="widget-header">
                        <div class="row">
                            <div class="col-sm-3">
                                <b @onclick="this.ShowFilterTrigger">Filter</b>
                                @*<div class="d-grid gap-2 col-12 mx-auto">
                        <button class="btn btn-outline-dark mb-4" @onclick="this.ShowFilterTrigger">Filter</button>
                        </div>*@
                            </div>
                        </div>
                    </div>
                    <div class="widget-content widget-content-area">

                        <div class="row">
                            <div class="col-sm-3">
                                <label for="exampleFormControlSelect1">Jobtyp</label>
                                <select class="form-select" id="exampleFormControlSelect1" @onchange=@OnChangeJobType>
                                    <option value="">Välj Jobtyp</option>
                                    @foreach (var job in this.jobTypes)
                                    {
                                        <option value="@job">@(job)</option>
                                    }
                                </select>
                            </div>

                            <div class="col-sm-3">
                                <label for="firstNameInput">Arbetsplats</label>
                                <input id="firstNameInput" type="text" class="form-control" placeholder="Arbetsplats" aria-label="Namn" @bind-value="this.jobPlaceInput" @bind-value:event="oninput">
                            </div>

                            <div class="col-sm-3">
                                <label for="firstNameInput">Tillämpa Filter</label>
                                <div class="d-grid gap-2 col-12 mx-auto">
                                    <button class="btn btn-dark mb-4" @onclick="this.ApplyFilters">Tillämpa</button>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <label for="firstNameInput">Rensa Filter</label>
                                <div class="d-grid gap-2 col-12 mx-auto">
                                    <button class="btn btn-dark mb-4" @onclick=this.ClearFilters>Rensa</button>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        }

        <div class="d-grid gap-2 col-1 mx-auto">
            <button class="btn btn-outline-secondary btn-icon mb-2 me-4 btn-rounded" @onclick="this.PreviousWeekButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-left"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>
            </button>
        </div>

        <div class="d-grid gap-2 col-1 mx-auto">
            @if (this._calendar != null)
            {
                <h5>V.@this.GetWeek(this._calendar.WeekStartDate)</h5>
            }
        </div>

        <div class="d-grid gap-2 col-1 mx-auto">
            <button class="btn btn-outline-secondary btn-icon mb-2 me-4 btn-rounded" @onclick="this.NextWeekButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-right"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>
            </button>
        </div>

        <br />
        <p></p>
        <hr />

        @if (this.classicScheme)
        {
            <table class="table table" style="max-width:100%; table-layout:fixed; border-collapse: collapse; ">
                <thead>
                    @if (this._calendar != null)
                    {
                        <tr>
                            <th scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:10px;">@(this.GetMonth(this._calendar.WeekStartDate))</div></th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.Day</div>M</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(1).Day</div>T</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(2).Day</div>O</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(3).Day</div>T</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(4).Day</div>F</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(5).Day</div>L</th>
                            <th class="text-center" scope="col" style="color:black;"><div style="max-width:100%; white-space:pre-line; font-size:8px;">@this._calendar.WeekStartDate.AddDays(6).Day</div>S</th>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">M</th>
                            <th scope="col">T</th>
                            <th scope="col">O</th>
                            <th scope="col">T</th>
                            <th scope="col">F</th>
                            <th scope="col">L</th>
                            <th scope="col">S</th>
                        </tr>
                    }
                </thead>
                <tbody>
                    @*<tr>
            <td><div style="max-width:100%; white-space:pre-line; font-size:7px;">Yad Mohamad</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
            </tr>*@
                    @if (this._calendar != null && this._calendar.Rows.Count > 0)
                    {
                        foreach (var row in this._calendar.Rows.Where(x => !string.IsNullOrEmpty(x.Monday) || !string.IsNullOrEmpty(x.Tuesday) || !string.IsNullOrEmpty(x.Wednesday) ||
                        !string.IsNullOrEmpty(x.Thursday) || !string.IsNullOrEmpty(x.Friday) || !string.IsNullOrEmpty(x.Saturday) ||
                        !string.IsNullOrEmpty(x.Sunday)).OrderByDescending(x => x.FirstName.ToLower() == "ledigt-pass") ?? Enumerable.Empty<Calendar.CalendarRow>())
                        {
                            @if (row.FirstName.ToLower() == "ledigt-pass")
                            {
                                <tr style="border: 1px solid #C5C5C5;">
                                    <td style="padding:0.5%; color:black;"><div style="padding:0.5%; overflow:hidden; max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;">@row.FirstName</div></td>
                                    @if (row.MondayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.MondayIds))">@row.Monday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.MondayId))">@((MarkupString)row.Monday)</div></td>
                                    }
                                    @if (row.TuesdayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.TuesdayIds))">@row.Tuesday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.TuesdayIds))">@((MarkupString)row.Tuesday)</div></td>
                                    }
                                    @if (row.WednesdayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.WednesdayIds))">@row.Wednesday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.WednesdayIds))">@((MarkupString)row.Wednesday)</div></td>
                                    }
                                    @if (row.ThursdayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.ThursdayIds))">@row.Thursday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.ThursdayIds))">@((MarkupString)row.Thursday)</div></td>
                                    }
                                    @if (row.FridayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.FridayIds))">@row.Friday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.FridayIds))">@((MarkupString)row.Friday)</div></td>
                                    }
                                    @if (row.SaturdayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SaturdayIds))">@row.Saturday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SaturdayIds))">@((MarkupString)row.Saturday)</div></td>
                                    }
                                    @if (row.SundayIds.Count == 0)
                                    {
                                        <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SundayIds))">@row.Sunday</div></td>
                                    }
                                    else
                                    {
                                        <td class="text-center" style="padding:1%; background-color:#CDFFDD; color:black; border: 1px solid rgb(197, 202, 197);"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SundayIds))">@((MarkupString)row.Sunday)</div></td>
                                    }
                                </tr>
                            }
                            else
                            {
                                <tr style="border: 1px solid rgb(197, 202, 197);">
                                    <td style="padding: 0.5%; color: black;"><div style="padding:0.5%; overflow:hidden; max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;">@row.FirstName</div></td>
                                    <td class="text-center" style="padding:1%; border: 1px solid rgb(197, 202, 197); color:black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.MondayIds))">@((MarkupString)row.Monday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.TuesdayIds))">@((MarkupString)row.Tuesday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.WednesdayIds))">@((MarkupString)row.Wednesday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.ThursdayIds))">@((MarkupString)row.Thursday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.FridayIds))">@((MarkupString)row.Friday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SaturdayIds))">@((MarkupString)row.Saturday)</div></td>
                                    <td class="text-center" style="padding: 1%; border: 1px solid rgb(197, 202, 197); color: black;"><div style="max-width:100%; white-space:pre-line; font-size:10px; font-weight: bold;" @onclick="(() => this.OpenDialog(row, row.SundayIds))">@((MarkupString)row.Sunday)</div></td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered" style="font-size:8px;">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th class="text-center" scope="col">M</th>
                            <th class="text-center" scope="col">T</th>
                            <th class="text-center" scope="col">O</th>
                            <th class="text-center" scope="col">T</th>
                            <th class="text-center" scope="col">F</th>
                            <th class="text-center" scope="col">L</th>
                            <th class="text-center" scope="col">S</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">Yad Mohamad</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                        </tr>
                        <tr>
                            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">Ahmad Djeza</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                        </tr>
                        <tr>
                            <td><div style="max-width:100%; white-space:pre-line; font-size:8px;">Ali Al-Shafey</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                            <td class="text-center"><div style="max-width:100%; white-space:pre-line; font-size:8px;">21:45-04:00</div></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }

        <hr />
    }

</div>

@*<button text="test" @onclick=@OpenDialog>Test</button>*@

@if (DialogIsOpen)
{
    <DialogModal Caption=@caption
             Message="@message"
             OnClose="@OnDialogClose"
             Type="DialogModal.Category.Okay"
             TakesInput="false"
             Bookings="this._selectedBookings"
             isAdmin="this.isAdmin"
             @ref="dialogRef">
    </DialogModal>
}

@code {
    private bool isLoading = true;
    private Calendar.Calendar? _calendar;
    private bool classicScheme = true;

    private DialogModal? dialogRef = null;
    private string? caption;
    private string? message;
    private bool DialogIsOpen = false;
    private List<DataAccessLibrary.Models.Schedule>? _selectedBookings;
    private bool isAdmin = false;

    private AuthenticationState? _authState;

    private bool ShowFilter = false;
    private List<string> jobTypes;
    private string jobTypeInput = "";
    private string jobPlaceInput = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActivePage("Scheme");

            //var authState = await this._authenticationState;
            var loggedInUser = (Authentication.CustomAuthenticationStateProvider)authStateProvider;
            var state = await loggedInUser.GetAuthenticationStateAsync();
            this._authState = state;

            if (this._authState != null)
            {
                this.isAdmin = this._authState.User.IsInRole("Administrator");
            }
            else
            {
                this.isAdmin = false;
            }

            this.jobTypes = new()
            {
                "Entrevärd",
                "Ordningsvakt",
                "Vaktchef",
                "Annat"
            };

            //await this.UserDataService.LoadData();

            await JS.InvokeVoidAsync("OnScrollEvent");
            this._calendar = this.CalendarService.InitializeCalendarData(DateTime.Now);
            this.isLoading = false;
            this.StateHasChanged();
        }
    }

    private void OnChangeJobType(ChangeEventArgs e)
    {
        string inputValue = e?.Value?.ToString();
        this.jobTypeInput = inputValue;
    }

    private void ShowFilterTrigger()
    {
        if (this.ShowFilter)
        {
            this.ShowFilter = false;
        }
        else
        {
            this.ShowFilter = true;
        }
    }

    private void ApplyFilters()
    {
        this.isLoading = true;
        this._calendar = this.CalendarService.InitializeCalendarData(DateTime.Now, this.jobTypeInput, this.jobPlaceInput);
        this.isLoading = false;
        this.StateHasChanged();
    }

    private void ClearFilters()
    {
        this.isLoading = true;
        this.jobPlaceInput = "";
        this.jobTypeInput = "";
        this._calendar = this.CalendarService.InitializeCalendarData(DateTime.Now);
        this.isLoading = false;
        this.StateHasChanged();
    }

    private async Task OpenDialog(Calendar.CalendarRow calendarRow, int bookingId)
    {
        this.caption = "";
        this.message = "";

        var booking = await this.BookingService.GetBooking(bookingId);

        if (booking == null)
        {
            return;
        }

        caption = calendarRow.FirstName;
        message = $"<b>Start:</b> {booking.DateStart.Value.ToString("yyyy-MM-dd")} {booking.TimeStart}  <br />";
        message += $"<b>Avslut:</b> {booking.DateEnd.Value.ToString("yyyy-MM-dd")} {booking.TimeEnd} <br />";
        message += $"<b>Typ:</b> {booking.JobType}  <br />";
        message += $"<b>Plats:</b> {booking.JobPlace}  <br />";

        DialogIsOpen = true;
    }

    private async Task OpenDialog(Calendar.CalendarRow calendarRow, List<int> ids)
    {
        this.caption = "";
        this.message = "";

        //bool isAdmin = false;
        //if (this._authState != null)
        //{
        //    isAdmin = this._authState.User.IsInRole("Administrator");
        //}
        //else
        //{
        //    isAdmin = false;
        //}

        //foreach (var id in ids)
        //{
        //    var booking = await this.BookingService.GetBooking(id);

        //    if (booking == null)
        //    {
        //        continue;
        //    }

        //    string[] timeStart = booking.TimeStart.Split(":");
        //    DateTime start = new DateTime(booking.DateStart.Value.Year, booking.DateStart.Value.Month, booking.DateStart.Value.Day,
        //                                int.Parse(timeStart[0]), int.Parse(timeStart[1]), 0);

        //    string[] timeEnd = booking.TimeEnd.Split(":");
        //    DateTime end = new DateTime(booking.DateEnd.Value.Year, booking.DateEnd.Value.Month, booking.DateEnd.Value.Day,
        //                                int.Parse(timeEnd[0]), int.Parse(timeEnd[1]), 0);

        //    caption = calendarRow.FirstName;
        //    message += $"<b>Start:</b> {booking?.DateStart.Value.ToString("yyyy-MM-dd")} {booking?.TimeStart}  <br />";
        //    message += $"<b>Avslut:</b> {booking?.DateEnd.Value.ToString("yyyy-MM-dd")} {booking?.TimeEnd} <br />";
        //    message += $"<b>Antal Timmar:</b> {(end - start).TotalHours} <br />";
        //    message += $"<b>Typ:</b> {booking.JobType} <br />";
        //    message += $"<b>Plats:</b> {booking.JobPlace} <br />";
        //    message += $"<b>Kommentar:</b> {booking.Comment} <br />";
        //    if(!this.BookingRequestsService.DoesRequestExistsForBooking(this.UserDataService.User.Id, booking.Id))
        //    {
        //        message += $"<br /><a class='btn btn-primary' href='/bookings/{booking.Id}' style='height:35px; width:100%;'>Redigera</a>";
        //    }

        //    if (isAdmin)
        //    {
        //        message += $"<br /><a class='btn btn-primary' href='/bookings/{booking.Id}' style='height:35px; width:100%;'>Redigera</a><hr />";
        //    }
        //    message += $"<br /><br />";
        //}

        caption = calendarRow.FirstName;

        this._selectedBookings = new();

        foreach (var id in ids)
        {
            var booking = await this.BookingService.GetBooking(id);

            if (booking == null)
            {
                continue;
            }

            this._selectedBookings.Add(booking);
        }

        DialogIsOpen = true;
        this.dialogRef?.UpdateState();
    }

    private async Task OnDialogClose(bool isOk)
    {
        //if (isOk)
        //{
        //    if (this.dialogRef == null || string.IsNullOrEmpty(this.dialogRef.InputText))
        //    {
        //        return;
        //    }

        //    /////////////
        //}

        //this.dialogRef.InputText = "";
        this.caption = "";
        this.message = "";
        DialogIsOpen = false;
    }

    public void OnSchemeTypeClick()
    {
        if (this.classicScheme)
        {
            this.classicScheme = false;
        }
        else
        {
            this.classicScheme = true;
        }

        this.StateHasChanged();
    }

    private string GetMonth(DateTime date)
    {
        string month = date.ToString("MMMM");

        return char.ToUpper(month[0]) + month.Substring(1);
    }

    private int GetWeek(DateTime date)
    {
        return System.Globalization.ISOWeek.GetWeekOfYear(date);
    }

    private async Task NextWeekButton()
    {
        this.isLoading = true;
        this.StateHasChanged();
        await Task.Delay(100);

        if (this._calendar != null)
        {
            DateTime currentCalendarDate = this._calendar.WeekStartDate;
            this._calendar = this.CalendarService.InitializeCalendarData(currentCalendarDate.AddDays(+7));
        }
        else
        {
            DateTime currentCalendarDate = DateTime.Now;
            this._calendar = this.CalendarService.InitializeCalendarData(currentCalendarDate.AddDays(+7));
        }

        this.isLoading = false;
        this.StateHasChanged();
    }

    private async Task PreviousWeekButton()
    {
        this.isLoading = true;
        this.StateHasChanged();
        await Task.Delay(100);

        if (this._calendar != null)
        {
            DateTime currentCalendarDate = this._calendar.WeekStartDate;
            this._calendar = this.CalendarService.InitializeCalendarData(currentCalendarDate.AddDays(-7));
        }
        else
        {
            DateTime currentCalendarDate = DateTime.Now;
            this._calendar = this.CalendarService.InitializeCalendarData(currentCalendarDate.AddDays(-7));
        }

        this.isLoading = false;
        this.StateHasChanged();
    }
}
